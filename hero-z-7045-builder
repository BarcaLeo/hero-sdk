#! /bin/bash
# Copyright (C) 2018 ETH Zurich and University of Bologna
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Error handler
set -e
trap 'previous_command=$this_command; this_command=$BASH_COMMAND' DEBUG
trap 'echo FAILED COMMAND: $previous_command' ERR

if [[ ! -f "${0##*/}" ]]; then
    echo "Error: ${0##*/} should be launched from the directory that contains it"
    exit 1
fi

# Setup the envioronmental variables
source scripts/hero-z-7045-env.sh

get_sources() {
    cd ${HERO_TOOLCHAIN_DIR}
    git submodule update --init --recursive

    cd ${HERO_PULP_SDK_DIR}
    git submodule update --init --recursive

    # Binutils sources
    cd ${HERO_OMP_TESTS_DIR}
    git submodule update --init --recursive
}

update_env() {
    source scripts/hero-z-7045-env.sh
}

build_riscv32_toolchain() {
    cd ${HERO_SDK_DIR}
    update_env

    cd ${HERO_TOOLCHAIN_DIR}
    ./hero_riscv32_toolchain_builder -dPj
}

build_pulp_sdk() {
    cd ${HERO_SDK_DIR}
    update_env

    cd ${HERO_PULP_SDK_DIR}
    source configs/hero-z-7045.sh
    make all env
}

build_arm_toolchain() {
    cd ${HERO_SDK_DIR}
    update_env

    cd ${HERO_TOOLCHAIN_DIR}
    ./hero_arm_toolchain_builder -dPj
}

build_linux() {
    cd ${HERO_SDK_DIR}
    update_env

    cd ${HERO_LINUX_DIR}
    ./hero-z-7045-linux-builder
}

build_liboffload() {
    cd ${HERO_SDK_DIR}
    update_env

    cd ${HERO_SDK_DIR}/libpulp-offload
    make clean all install
}

build_hero_toolchain() {
    cd ${HERO_SDK_DIR}
    update_env

    cd ${HERO_TOOLCHAIN_DIR}
    ./hero_riscv32_toolchain_builder -gj
    ./hero_arm_toolchain_builder -gj
}

# Usage info
show_help() {
cat << EOF
Usage: ${0##*/} [-hAaPpLlOo]
HERO SDK builder
----------------------------------------------------

HERO toolchain commands
----------------------------------------------------

    -A : build whole HERO toolchain and its dependecies:
          > ARM GCC standalone toolchain
          > RISCV GCC standalone toolchain
          > PULP SDK
          > libpulp-offload
    -a : build HERO toolchain only



Other Commands
----------------------------------------------------

PULP SDK commands
----------------------------------------------------

    -P : build PULP SDK and its dependecies:
          > RISCV GCC standalone toolchain
          > PULP SDK
    -p : build PULP SDK only


Linux Kernel commands
----------------------------------------------------

    -L : build Linux Kernel and its dependecies:
          > ARM GCC standalone toolchain
          > Linux Kernel 
    -l : build Linux Kernel only


Libpulp-offload commands
----------------------------------------------------

    -O : build 'libpulp-offload' and its dependecies:
          > ARM GCC standalone toolchain
          > RISCV GCC standalone toolchain
          > libpulp-offload
    -o : build libpulp-offload only

EOF
}

do_get_sources=false
do_build_riscv32_toolchain=false
do_build_arm_toolchain=false
do_build_pulp_sdk=false
do_build_arm_toolchain=false
do_build_linux=false
do_build_liboffload=false
do_build_hero_toolchain=false


while getopts hAaPpLlOod opt; do
    case $opt in
        P)
            do_get_sources=true
            do_build_riscv32_toolchain=true
            do_build_pulp_sdk=true
            ;;
        p)
            do_build_pulp_sdk=true
            ;;
        L)
            do_get_sources=true
            do_build_arm_toolchain=true
            do_build_linux=true
            ;;
        l)
            do_build_linux=true
            ;;
        O)
            do_get_sources=true
            do_build_riscv32_toolchain=true
            do_build_pulp_sdk=true
            do_build_arm_toolchain=true
            do_build_liboffload=true
            ;;
        o)
            do_build_liboffload=true
            ;;
        d) 
            do_get_sources=true
            ;;
        A)
            do_get_sources=true
            do_build_riscv32_toolchain=true
            do_build_pulp_sdk=true
            do_build_arm_toolchain=true
            do_build_liboffload=true
            do_build_hero_toolchain=true
            ;;
        a)
            do_build_hero_toolchain=true
            ;;
        h)
            show_help
            exit 0
            ;;
        *)
            show_help >&2
            exit 1
            ;;
    esac
done

if [ "$do_get_sources" = true ] ; then
    get_sources
fi

if [ "$do_build_riscv32_toolchain" = true ] ; then
    build_riscv32_toolchain
fi

if [ "$do_build_arm_toolchain" = true ] ; then
    build_arm_toolchain
fi

if [ "$do_build_pulp" = true ] ; then
    build_pulp_sdk
fi

if [ "$do_build_pulp" = true ] ; then
    build_linux
fi

if [ "$do_build_liboffload" = true ] ; then
    build_liboffload
fi

if [ "$do_build_hero_toolchain" = true ] ; then
    build_hero_toolchain
fi

# That's all folks!!
