#! /bin/bash
# Copyright (C) 2018 ETH Zurich and University of Bologna
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Error handler
set -e
trap 'previous_command=$this_command; this_command=$BASH_COMMAND' DEBUG
trap 'echo FAILED COMMAND: $previous_command' ERR

if [[ ! -f "${0##*/}" ]]; then
    echo "Error: ${0##*/} should be launched from the directory that contains it"
    exit 1
fi

# Build configuration
PARBUILD=-j8

update_env() {
    source scripts/hero-z-7045-env.sh
}

get_sources() {
    cd ${HERO_SDK_DIR}
    update_env

    cd ${HERO_TOOLCHAIN_DIR}
    git submodule update --init --recursive

    cd ${HERO_PULP_SDK_DIR}
    git submodule update --init --recursive

    cd ${HERO_SUPPORT_DIR}
    git submodule update --init --recursive

    cd ${HERO_OMP_TESTS_DIR}
    git submodule update --init --recursive
}

build_riscv32_toolchain() {
    cd ${HERO_SDK_DIR}
    update_env

    cd ${HERO_TOOLCHAIN_DIR}
    ./hero_riscv32_toolchain_builder -dPj
}

build_pulp_sdk() {
    cd ${HERO_SDK_DIR}
    update_env

    cd ${HERO_PULP_SDK_DIR}
    source configs/hero-z-7045.sh
    make all env
}

build_arm_toolchain() {
    cd ${HERO_SDK_DIR}
    update_env

    cd ${HERO_TOOLCHAIN_DIR}
    ./hero_arm_toolchain_builder -dPj
}

build_linux() {
    cd ${HERO_SDK_DIR}
    update_env

    # Does the kernel directory already exist? It may be external.
    if [ ! -d "${HERO_LINUX_KERNEL_DIR}" ]; then

        # Prepare Linux workspace and get sources
        mkdir -p ${HERO_LINUX_WORKSPACE_DIR}
        cp -r ${HERO_SUPPORT_DIR}/linux/zynqlinux/* ${HERO_LINUX_WORKSPACE_DIR}/.
        cd ${HERO_LINUX_WORKSPACE_DIR}
        ./setup.sh

        # Try to build kernel (will fail because of missing U-Boot mkimage)
        cd ${HERO_LINUX_KERNEL_DIR}
        {
            ./compile_kernel.sh  ${PARBUILD}
        } || {
            echo "Linux kernel build failed as expected. I will retry later."
        }

        # Build U-Boot (needed for kernel build)
        cd ${HERO_LINUX_WORKSPACE_DIR}/u-boot-xlnx
        ./compile_loader.sh ${PARBUILD}

        # Build kernel & modules
        cd ${HERO_LINUX_KERNEL_DIR}
        ./compile_kernel.sh  ${PARBUILD}
        ./compile_modules.sh ${PARBUILD}
    fi
}

build_liboffload() {
    cd ${HERO_SDK_DIR}
    update_env

    cd ${HERO_SDK_DIR}/libpulp-offload
    make clean all
}

build_hero_toolchain() {
    cd ${HERO_SDK_DIR}
    update_env

    cd ${HERO_TOOLCHAIN_DIR}
    ./hero_riscv32_toolchain_builder -gj
    ./hero_arm_toolchain_builder -gj
}

# Usage info
show_help() {
cat << EOF
Usage: ${0##*/} [-hAsrpalot]
HERO SDK builder
----------------------------------------------------

HERO toolchain commands
----------------------------------------------------

  -A : build whole HERO toolchain and its dependecies:
    > get sources
    > RISCV GCC standalone toolchain
    > PULP SDK
    > ARM GCC standalone toolchain
    > Linux kernel
    > libpulp-offload
    > HERO toolchain


Commands for building individual components
----------------------------------------------------

  -s : get sources
  -r : RISCV GCC standalone toolchain
  -p : PULP SDK
  -a : ARM GCC standalone toolchain
  -l : Linux kernel
  -o : libpulp-offload
  -t : HERO toolchain

EOF
}

# Setup the environment variables
update_env

do_get_sources=false
do_build_riscv32_toolchain=false
do_build_pulp_sdk=false
do_build_arm_toolchain=false
do_build_linux=false
do_build_liboffload=false
do_build_hero_toolchain=false

while getopts hAsrpalot opt; do
    case $opt in

        A)
            do_get_sources=true
            do_build_riscv32_toolchain=true
            do_build_pulp_sdk=true
            do_build_arm_toolchain=true
            do_build_linux=true
            do_build_liboffload=true
            do_build_hero_toolchain=true
            ;;
        s)
            do_get_sources=true
            ;;
        r)
            do_build_riscv32_toolchain=true
            ;;
        p)
            do_build_pulp_sdk=true
            ;;
        a)
            do_build_arm_toolchain=true
            ;;
        l)
            do_build_linux=true
            ;;
        o)
            do_build_liboffload=true
            ;;
        t)
            do_build_hero_toolchain=true
            ;;
        h)
            show_help
            exit 0
            ;;
        *)
            show_help >&2
            exit 1
            ;;
    esac
done

if [ "$do_get_sources" = true ] ; then
    get_sources
fi

if [ "$do_build_riscv32_toolchain" = true ] ; then
    build_riscv32_toolchain
fi

if [ "$do_build_pulp_sdk" = true ] ; then
    build_pulp_sdk
fi

if [ "$do_build_arm_toolchain" = true ] ; then
    build_arm_toolchain
fi

if [ "$do_build_linux" = true ] ; then
    build_linux
fi

if [ "$do_build_liboffload" = true ] ; then
    build_liboffload
fi

if [ "$do_build_hero_toolchain" = true ] ; then
    build_hero_toolchain
fi

# That's all folks!!
